name: "Helm Chart Render"
description: "Runs basic Helm template render" 
inputs: 
  template_path: 
    description: 'path to template' 
    required: true 
  report_full_template: 
    description: 'Indicated if the full template should be posted to github comment. Consider switchit it off for massive charts'
    default: true 
    required: false 
  template_args:
    description: 'Adds additional arguments to "helm template" command' 
    required: false 
runs: 
  using: "composite" 
  steps: 
    - name: Render template
      id: render_template
      run: | 
        helm template testing ${{ inputs.template_path }} ${{ inputs.template_args }} 2>&1 | tee /tmp/content.yaml 
        result_code=${PIPESTATUS[0]}
        exit $result_code
      shell: bash
 
    - name: Report Template result 
      uses: actions/github-script@v6

      if: ${{ github.event_name == 'pull_request' }}
      with:
        script: |
          const fs = require("fs");
          const render = fs.readFileSync("/tmp/content.yaml", "utf8");
          const maxGitHubCommentLength = 65536;

          function chunkString(str, size) {
            const numChunks = Math.ceil(str.length / size)
            const chunks = new Array(numChunks)
            for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
              chunks[i] = str.substr(o, size)
            }
            return chunks
          }

          // diff file size may exceed the maximum allowed number of characters in a comment
          // chunk it and create a comment for each chunk
          var chunks = chunkString(render, maxGitHubCommentLength);
          for (let i = 0; i < chunks.length; i++) {
            const commentBody = `
            #### Part \`${i + 1}\`

            <details><summary>Show result</summary>

            \`\`\`diff\n
            ${chunks[i]}
            \`\`\`

            </details>

            *Event: \`${{ github.event_name }}\`, pushed by @${{ github.actor }}
            Workflow: \`${{ github.workflow }}\`, Job: \`${{ github.job }}\`*

            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            })
          }
